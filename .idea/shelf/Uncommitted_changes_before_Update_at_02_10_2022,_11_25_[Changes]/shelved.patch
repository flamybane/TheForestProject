Index: main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"TheForestProject/blockchain\"\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/dgraph-io/badger\"\n\t\"log\"\n\t\"os\"\n\t\"runtime\"\n\t\"strconv\"\n)\n\ntype CommandLine struct{}\n\nfunc (cli *CommandLine) printUsage() {\n\tfmt.Println(\"Usage:\")\n\tfmt.Println(\" getbalance -address ADDRESS - get the balance for an address\")\n\tfmt.Println(\" createblockchain -address ADDRESS creates a blockchain and sends genesis reward to address\")\n\tfmt.Println(\" printchain - Prints the blocks in the chain\")\n\tfmt.Println(\" send -from FROM -to TO -amount AMOUNT - Send amount of coins\")\n}\n\nfunc (cli *CommandLine) validateArgs() {\n\tif len(os.Args) < 2 {\n\t\tcli.printUsage()\n\t\truntime.Goexit()\n\t}\n}\n\nfunc (cli *CommandLine) printChain() {\n\tchain := blockchain.ContinueBlockChain(\"\")\n\tdefer func(Database *badger.DB) {\n\t\terr := Database.Close()\n\t\tif err != nil {\n\n\t\t}\n\t}(chain.Database)\n\titer := chain.Iterator()\n\n\tfor {\n\t\tblock := iter.Next()\n\n\t\tfmt.Printf(\"Previous hash: %x\\n\", block.PrevHash)\n\t\tfmt.Printf(\"Hash: %x\\n\", block.Hash)\n\t\tpow := blockchain.NewProof(block)\n\t\tfmt.Printf(\"PoW: %s\\n\", strconv.FormatBool(pow.Validate()))\n\t\tfmt.Println()\n\n\t\tif len(block.PrevHash) == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc (cli *CommandLine) createBlockChain(address string) {\n\tchain := blockchain.InitBlockChain(address)\n\terr := chain.Database.Close()\n\tif err != nil {\n\t\treturn\n\t}\n\tfmt.Println(\"Finished!\")\n}\n\nfunc (cli *CommandLine) getBalance(address string) {\n\tchain := blockchain.ContinueBlockChain(address)\n\tdefer func(Database *badger.DB) {\n\t\terr := Database.Close()\n\t\tif err != nil {\n\n\t\t}\n\t}(chain.Database)\n\n\tbalance := 0\n\tUTXOs := chain.FindUTXO(address)\n\n\tfor _, out := range UTXOs {\n\t\tbalance += out.Value\n\t}\n\n\tfmt.Printf(\"Balance of %s: %d\\n\", address, balance)\n}\n\nfunc (cli *CommandLine) send(from, to string, amount int) {\n\tchain := blockchain.ContinueBlockChain(from)\n\tdefer func(Database *badger.DB) {\n\t\terr := Database.Close()\n\t\tif err != nil {\n\n\t\t}\n\t}(chain.Database)\n\n\ttx := blockchain.NewTransaction(from, to, amount, chain)\n\tchain.AddBlock([]*blockchain.Transaction{tx})\n\tfmt.Println(\"Success!\")\n}\n\nfunc (cli *CommandLine) run() {\n\tcli.validateArgs()\n\n\tgetBalanceCmd := flag.NewFlagSet(\"getbalance\", flag.ExitOnError)\n\tcreateBlockchainCmd := flag.NewFlagSet(\"createblockchain\", flag.ExitOnError)\n\tsendCmd := flag.NewFlagSet(\"send\", flag.ExitOnError)\n\tprintChainCmd := flag.NewFlagSet(\"printchain\", flag.ExitOnError)\n\n\tgetBalanceAddress := getBalanceCmd.String(\"address\", \"\", \"The address to get balance for\")\n\tcreateBlockchainAddress := createBlockchainCmd.String(\"address\", \"\", \"The address to send genesis block reward to\")\n\tsendFrom := sendCmd.String(\"from\", \"\", \"Source wallet address\")\n\tsendTo := sendCmd.String(\"to\", \"\", \"Destination wallet address\")\n\tsendAmount := sendCmd.Int(\"amount\", 0, \"Amount to send\")\n\n\tswitch os.Args[1] {\n\tcase \"getbalance\":\n\t\terr := getBalanceCmd.Parse(os.Args[2:])\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\tcase \"createblockchain\":\n\t\terr := createBlockchainCmd.Parse(os.Args[2:])\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\tcase \"printchain\":\n\t\terr := printChainCmd.Parse(os.Args[2:])\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\tcase \"send\":\n\t\terr := sendCmd.Parse(os.Args[2:])\n\t\tif err != nil {\n\t\t\tlog.Panic(err)\n\t\t}\n\tdefault:\n\t\tcli.printUsage()\n\t\truntime.Goexit()\n\t}\n\n\tif getBalanceCmd.Parsed() {\n\t\tif *getBalanceAddress == \"\" {\n\t\t\tgetBalanceCmd.Usage()\n\t\t\truntime.Goexit()\n\t\t}\n\t\tcli.getBalance(*getBalanceAddress)\n\t}\n\n\tif createBlockchainCmd.Parsed() {\n\t\tif *createBlockchainAddress == \"\" {\n\t\t\tcreateBlockchainCmd.Usage()\n\t\t\truntime.Goexit()\n\t\t}\n\t\tcli.createBlockChain(*createBlockchainAddress)\n\t}\n\n\tif printChainCmd.Parsed() {\n\t\tcli.printChain()\n\t}\n\n\tif sendCmd.Parsed() {\n\t\tif *sendFrom == \"\" || *sendTo == \"\" || *sendAmount <= 0 {\n\t\t\tsendCmd.Usage()\n\t\t\truntime.Goexit()\n\t\t}\n\n\t\tcli.send(*sendFrom, *sendTo, *sendAmount)\n\t}\n}\n\nfunc main() {\n\tdefer os.Exit(0)\n\tcli := CommandLine{}\n\tcli.run()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.go b/main.go
--- a/main.go	(revision 0a3573156c8bca3bd32188bf50108d7c73eb3057)
+++ b/main.go	(date 1664627806088)
@@ -33,7 +33,7 @@
 	defer func(Database *badger.DB) {
 		err := Database.Close()
 		if err != nil {
-
+			log.Panic(err)
 		}
 	}(chain.Database)
 	iter := chain.Iterator()
@@ -67,7 +67,7 @@
 	defer func(Database *badger.DB) {
 		err := Database.Close()
 		if err != nil {
-
+			log.Panic(err)
 		}
 	}(chain.Database)
 
@@ -86,7 +86,7 @@
 	defer func(Database *badger.DB) {
 		err := Database.Close()
 		if err != nil {
-
+			log.Panic(err)
 		}
 	}(chain.Database)
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"ALL\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"dbe544e3-e51d-40a7-bdf5-74ce45fd3b78\" name=\"Changes\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/main.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.go\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Go File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"GOROOT\" url=\"file://$USER_HOME$/sdk/go1.19.1\" />\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n    <option name=\"RESET_MODE\" value=\"HARD\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2FShu4pbXTfyF3gLmumznJMMeM2\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.go.format.on.save.advertiser.fired&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.go.watchers.conflict.with.on.save.actions.check.performed&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;configurable..is.expanded&quot;: &quot;false&quot;,\n    &quot;configurable.GoLibrariesConfigurable.is.expanded&quot;: &quot;true&quot;,\n    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,\n    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/brff&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.goide.configuration.GoLibrariesConfigurableProvider&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\">\n      <module name=\"TheForestProject\" />\n      <working_directory value=\"$PROJECT_DIR$\" />\n      <go_parameters value=\"-i\" />\n      <kind value=\"FILE\" />\n      <directory value=\"$PROJECT_DIR$\" />\n      <filePath value=\"$PROJECT_DIR$\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VgoProject\">\n    <settings-migrated>true</settings-migrated>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 0a3573156c8bca3bd32188bf50108d7c73eb3057)
+++ b/.idea/workspace.xml	(date 1664639639802)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="ALL" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="dbe544e3-e51d-40a7-bdf5-74ce45fd3b78" name="Changes" comment="">
+    <list default="true" id="dbe544e3-e51d-40a7-bdf5-74ce45fd3b78" name="Changes" comment="lil fix">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/main.go" afterDir="false" />
     </list>
@@ -20,7 +20,7 @@
       </list>
     </option>
   </component>
-  <component name="GOROOT" url="file://$USER_HOME$/sdk/go1.19.1" />
+  <component name="GOROOT" url="file:///opt/homebrew/Cellar/go/1.19.1/libexec" />
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
     <option name="RESET_MODE" value="HARD" />
@@ -33,36 +33,25 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.go.format.on.save.advertiser.fired&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.go.watchers.conflict.with.on.save.actions.check.performed&quot;: &quot;true&quot;,
-    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;configurable..is.expanded&quot;: &quot;false&quot;,
-    &quot;configurable.GoLibrariesConfigurable.is.expanded&quot;: &quot;true&quot;,
-    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
-    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/brff&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.goide.configuration.GoLibrariesConfigurableProvider&quot;
-  }
-}</component>
-  <component name="RunManager">
-    <configuration default="true" type="GoApplicationRunConfiguration" factoryName="Go Application">
-      <module name="TheForestProject" />
-      <working_directory value="$PROJECT_DIR$" />
-      <go_parameters value="-i" />
-      <kind value="FILE" />
-      <directory value="$PROJECT_DIR$" />
-      <filePath value="$PROJECT_DIR$" />
-      <method v="2" />
-    </configuration>
-  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "DefaultGoTemplateProperty": "Go File",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "RunOnceActivity.go.format.on.save.advertiser.fired": "true",
+    "RunOnceActivity.go.formatter.settings.were.checked": "true",
+    "RunOnceActivity.go.migrated.go.modules.settings": "true",
+    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
+    "RunOnceActivity.go.watchers.conflict.with.on.save.actions.check.performed": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "configurable..is.expanded": "false",
+    "configurable.GoLibrariesConfigurable.is.expanded": "true",
+    "go.import.settings.migrated": "true",
+    "go.sdk.automatically.set": "true",
+    "last_opened_file_path": "/Users/riddledwithknife",
+    "settings.editor.selected.configurable": "com.goide.configuration.GoLibrariesConfigurableProvider"
+  }
+}]]></component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
@@ -77,6 +66,10 @@
         </entry>
       </map>
     </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="lil fix" />
+    <option name="LAST_COMMIT_MESSAGE" value="lil fix" />
   </component>
   <component name="VgoProject">
     <settings-migrated>true</settings-migrated>
